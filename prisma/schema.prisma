// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?  // URL du logo
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users    User[]
  projects Project[]

  @@map("companies")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("CLIENT") // ADMIN or CLIENT
  companyId String?  // Pour les clients, lier à une entreprise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company        Company?       @relation(fields: [companyId], references: [id])
  projects       Project[]      @relation("ProjectClient")
  adminProjects  Project[]      @relation("ProjectAdmin")
  tickets        Ticket[]
  responses      TicketResponse[]
  comments       Comment[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("IN_PROGRESS") // NOT_STARTED, IN_PROGRESS, COMPLETED, ON_HOLD, CANCELLED
  progress    Int      @default(0) // 0-100
  startDate   DateTime?
  endDate     DateTime?
  driveFolderId String?     // Google Drive folder ID
  driveFolderUrl String?    // Google Drive folder URL
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  clientId    String
  client      User          @relation("ProjectClient", fields: [clientId], references: [id])
  adminId     String
  admin       User          @relation("ProjectAdmin", fields: [adminId], references: [id])
  companyId   String?       // Lier le projet à une entreprise
  company     Company?      @relation(fields: [companyId], references: [id])
  steps       ProjectStep[]
  actions     ProjectAction[]
  tickets     Ticket[]
  files       ProjectFile[]
  comments    Comment[]

  @@map("projects")
}

model ProjectStep {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  completed   Boolean  @default(false)
  completedAt DateTime?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_steps")
}

model ProjectAction {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   @default("CLIENT") // CLIENT or LEXIA
  completed   Boolean  @default(false)
  completedAt DateTime?
  dueDate     DateTime?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_actions")
}

model ProjectFile {
  id          String   @id @default(cuid())
  name        String
  driveFileId String   // Google Drive file ID
  driveFileUrl String  // Google Drive file URL
  mimeType    String?
  size        Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_files")
}

model Ticket {
  id          String   @id @default(cuid())
  subject     String
  message     String
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  responses   TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id        String   @id @default(cuid())
  message   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("ticket_responses")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

// Enums are not supported in SQLite, using strings instead
// UserRole: "ADMIN" | "CLIENT"
// ProjectStatus: "NOT_STARTED" | "IN_PROGRESS" | "COMPLETED" | "ON_HOLD" | "CANCELLED"
// TicketStatus: "OPEN" | "IN_PROGRESS" | "RESOLVED" | "CLOSED"
// TicketPriority: "LOW" | "MEDIUM" | "HIGH" | "URGENT"
