// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("CLIENT") // ADMIN or CLIENT
  avatar    String?  // URL de l'avatar ou nom du fichier
  companyId String?  // Pour les clients, lier Ã  une entreprise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company        Company?       @relation(fields: [companyId], references: [id])
  projects       Project[]      @relation("ProjectClient")
  adminProjects  Project[]      @relation("ProjectAdmin")
  tickets        Ticket[]
  responses      TicketResponse[]
  comments       Comment[]

  @@map("users")
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  logo      String?  // URL du logo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users    User[]
  projects Project[]

  @@map("companies")
}

model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  status         String   @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, ON_HOLD, COMPLETED
  progress       Int      @default(0) // 0-100
  startDate      DateTime?
  endDate        DateTime?
  driveFolderId  String?
  driveFolderUrl String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  clientId  String
  client    User   @relation("ProjectClient", fields: [clientId], references: [id])
  adminId   String
  admin     User   @relation("ProjectAdmin", fields: [adminId], references: [id])
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  steps     ProjectStep[]
  actions   ProjectAction[]
  files     ProjectFile[]
  tickets   Ticket[]
  comments  Comment[]

  @@map("projects")
}

model ProjectStep {
  id          String    @id @default(cuid())
  title       String
  description String?
  order       Int
  completed   Boolean   @default(false)
  completedAt DateTime?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_steps")
}

model ProjectAction {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String    // CLIENT or LEXIA
  order       Int
  completed   Boolean   @default(false)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_actions")
}

model ProjectFile {
  id           String   @id @default(cuid())
  name         String
  driveFileId  String   @unique
  driveFileUrl String
  mimeType     String?
  size         Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_files")
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  responses TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@map("ticket_responses")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@map("comments")
}

// Enums are not supported in SQLite, using strings instead
// UserRole: "ADMIN" | "CLIENT"
// ProjectStatus: "NOT_STARTED" | "IN_PROGRESS" | "COMPLETED" | "ON_HOLD" | "CANCELLED"
// TicketStatus: "OPEN" | "IN_PROGRESS" | "RESOLVED" | "CLOSED"
// TicketPriority: "LOW" | "MEDIUM" | "HIGH" | "URGENT"
