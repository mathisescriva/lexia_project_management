// Script pour d√©boguer l'authentification
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();

async function debugAuth() {
  try {
    console.log('üîç Debug de l\'authentification...');
    console.log('');

    // 1. V√©rifier la connexion √† la base de donn√©es
    console.log('1Ô∏è‚É£ Test de connexion √† la base de donn√©es...');
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie');
    console.log('');

    // 2. V√©rifier si l'utilisateur existe
    console.log('2Ô∏è‚É£ Recherche de l\'utilisateur admin...');
    const user = await prisma.user.findUnique({
      where: { email: 'admin@lexia.com' }
    });

    if (!user) {
      console.log('‚ùå Utilisateur admin@lexia.com non trouv√©');
      return;
    }

    console.log('‚úÖ Utilisateur trouv√©:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Nom: ${user.name}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   R√¥le: ${user.role}`);
    console.log(`   Mot de passe hash√©: ${user.password.substring(0, 20)}...`);
    console.log('');

    // 3. Test de v√©rification du mot de passe
    console.log('3Ô∏è‚É£ Test de v√©rification du mot de passe...');
    const isValidPassword = await bcrypt.compare('admin123', user.password);
    console.log(`Mot de passe valide: ${isValidPassword}`);
    console.log('');

    // 4. Test de g√©n√©ration de token JWT
    console.log('4Ô∏è‚É£ Test de g√©n√©ration de token JWT...');
    const JWT_SECRET = process.env.JWT_SECRET || 'lexia-production-jwt-secret-key-2025';
    console.log(`JWT_SECRET utilis√©: ${JWT_SECRET.substring(0, 20)}...`);
    
    const token = jwt.sign({
      userId: user.id,
      email: user.email,
      role: user.role,
    }, JWT_SECRET, { expiresIn: '7d' });
    
    console.log(`Token g√©n√©r√©: ${token.substring(0, 50)}...`);
    console.log('');

    // 5. Test de v√©rification du token
    console.log('5Ô∏è‚É£ Test de v√©rification du token...');
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log('Token d√©cod√©:', decoded);
    console.log('');

    console.log('‚úÖ Tous les tests d\'authentification sont r√©ussis !');
    console.log('');
    console.log('üîß Le probl√®me pourrait venir de :');
    console.log('   - Variables d\'environnement sur Render');
    console.log('   - Configuration de Prisma');
    console.log('   - Probl√®me de build/deployment');

  } catch (error) {
    console.error('‚ùå Erreur lors du debug:', error);
    console.error('Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

debugAuth();
